services:
  nginx:
    image: nginx:1.27.4-alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_HOST=api.rikko.space
    restart: unless-stopped
    depends_on:
      - server
    networks:
      - nginx-network

  database:
    image: postgres
    ports:
      - "5432:5432"  #DEV STUFF, REMOVE LATER
    environment:
      - PGUSER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=auth
      - POSTGRES_PASSWORD=postgres
    volumes:
      - store_database_data:/var/lib/postgresql/data
      - ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - database_network

  keygen:
    build: ./keygen
    container_name: keygen_c
    volumes:
      - secrets:/secrets
    restart: no

  redis:
    image: redis:8.0-rc1-alpine
    restart: always
    command: >
      redis-server 
      --save 20 1 
      --loglevel warning 
      --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81 
      --maxmemory 256mb 
      --protected-mode yes 
      --maxmemory-policy allkeys-lru
    volumes:
      - redis:/data
    networks:
      - redis_network

  server:
    build: ./Server
    container_name: auth_server_c
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_LOGGER_URL=${DATABASE_LOGGER_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - secrets:/app/secrets
    depends_on:
      - database
      - redis
      - keygen
    restart: unless-stopped
    networks:
      - nginx-network
      - database_network
      - redis_network
        
  migration:
    build: ./MigrationUtility
    container_name: migration_utility_c
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    restart: no
    networks:
      - database_network

#  webapp:
#    build:
#      context: ./website
#      dockerfile: Dockerfile
#    environment:
#      - NODE_ENV=production
#    networks:
#      - nginx-network
#    depends_on:
#      - nginx
#    #  - server

  webapp:
    build:
      context: ./website
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./website:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true 
      - WATCHPACK_POLLING=true
    networks:
      - nginx-network
    depends_on:
      - nginx

volumes:
  store_database_data:
  secrets:
  redis:
      driver: local
    
networks:
  nginx-network:
    driver: bridge
  database_network:
    driver: bridge
  redis_network:
    driver: bridge




